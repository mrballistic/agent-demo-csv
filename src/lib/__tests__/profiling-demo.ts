/**
 * Demo script showing the profiling workflow
 * This demonstrates the complete flow from file upload to artifact generation
 */

import { assistantManager } from '../openai';
import { sessionStore } from '../session-store';
import { fileStore } from '../file-store';

async function demonstrateProfilingWorkflow() {
  console.log('🚀 Starting AI Data Analyst Profiling Demo\n');

  // Check if OpenAI API key is available
  const hasOpenAIKey =
    process.env.OPENAI_API_KEY &&
    process.env.OPENAI_API_KEY !== 'your_openai_api_key_here';

  if (!hasOpenAIKey) {
    console.log('⚠️  No OpenAI API key found - running in simulation mode\n');
  }

  try {
    // Step 1: Create assistant and thread (simulated if no API key)
    console.log('1. Creating OpenAI Assistant...');
    if (hasOpenAIKey) {
      const assistant = await assistantManager.createAssistant();
      console.log(`   ✅ Assistant created: ${assistant.id}\n`);
    } else {
      console.log(`   🎭 Simulated assistant created: asst_demo123\n`);
    }

    console.log('2. Creating conversation thread...');
    let threadId: string;
    if (hasOpenAIKey) {
      const thread = await assistantManager.createThread();
      threadId = thread.id;
      console.log(`   ✅ Thread created: ${threadId}\n`);
    } else {
      threadId = 'thread_demo123';
      console.log(`   🎭 Simulated thread created: ${threadId}\n`);
    }

    // Step 2: Create session
    console.log('3. Creating user session...');
    const session = sessionStore.createSession(threadId);
    console.log(`   ✅ Session created: ${session.id}`);
    console.log(`   📊 Initial metrics:`, session.metrics);
    console.log();

    // Step 3: Simulate file upload and profiling
    console.log('4. Simulating CSV file upload...');
    const mockFileId = 'demo-sales-data.csv';
    console.log(`   📁 File ID: ${mockFileId}\n`);

    // Step 4: Create profiling message
    console.log('5. Creating profiling message...');
    let messageId: string;
    if (hasOpenAIKey) {
      const message = await assistantManager.createMessage(
        session.threadId,
        'Profile the file and suggest questions.',
        `file-${mockFileId}`
      );
      messageId = message.id;
      console.log(`   💬 Message created: ${messageId}\n`);
    } else {
      messageId = 'msg_demo123';
      console.log(`   🎭 Simulated message created: ${messageId}\n`);
    }

    // Step 5: Start analysis run
    console.log('6. Starting analysis run...');
    let runId: string;
    if (hasOpenAIKey) {
      const run = await assistantManager.createRun(session.threadId);
      runId = run.id;
      console.log(`   🔄 Run started: ${runId}`);
      console.log(`   📈 Status: ${run.status}\n`);
    } else {
      runId = 'run_demo123';
      console.log(`   🎭 Simulated run started: ${runId}`);
      console.log(`   📈 Status: queued\n`);
    }

    // Step 6: Update session metrics
    console.log('7. Updating session metrics...');
    sessionStore.updateSession(session.id, {
      metrics: {
        ...session.metrics,
        analysesCount: session.metrics.analysesCount + 1,
      },
    });
    const updatedSession = sessionStore.getSession(session.id);
    console.log(`   📊 Updated metrics:`, updatedSession?.metrics);
    console.log();

    // Step 7: Simulate artifact creation
    console.log('8. Creating profile summary artifact...');
    const summaryContent = `# Data Profile Summary

## Dataset Overview
- **File:** demo-sales-data.csv
- **Rows:** 1,247
- **Columns:** 8
- **Size:** 156 KB
- **Quality:** Excellent

## Column Analysis
| Column | Type | Missing % | Sample Values |
|--------|------|-----------|---------------|
| order_date | Date | 0% | 2024-01-15, 2024-02-03 |
| customer_id | String | 0% | CUST_001, CUST_002 |
| product_sku | String | 0% | SKU_A123, SKU_B456 |
| quantity | Integer | 0% | 1, 5, 12 |
| unit_price | Float | 0% | 29.99, 149.50 |
| channel | String | 0% | online, retail |
| region | String | 0% | North, South |
| discount_pct | Float | 2% | 0, 10, 15 |

## Key Insights
- ✅ No PII detected
- ✅ Clean data with minimal missing values
- ✅ Ready for analysis
- 📈 Strong revenue potential in dataset

## Suggested Analyses
1. **Revenue Trends**: Analyze sales over time
2. **Top Products**: Identify best-performing SKUs  
3. **Channel Performance**: Compare online vs retail
4. **Regional Analysis**: Geographic sales patterns
5. **Discount Impact**: Effect on purchase behavior

---
*Generated by AI Data Analyst on ${new Date().toISOString()}*
`;

    const artifact = await fileStore.storeArtifact(
      session.id,
      'profile_summary',
      Buffer.from(summaryContent, 'utf-8'),
      'md'
    );

    console.log(`   📄 Artifact created: ${artifact.id}`);
    console.log(`   📝 Filename: ${artifact.originalName}`);
    console.log(`   💾 Size: ${artifact.size} bytes`);
    console.log(`   🔒 Checksum: ${artifact.checksum.substring(0, 8)}...`);
    console.log();

    // Step 8: Update session with artifact
    console.log('9. Updating session with artifact...');
    if (updatedSession) {
      updatedSession.artifacts.push({
        id: artifact.id,
        name: artifact.originalName,
        type: 'file',
        size: artifact.size,
        checksum: artifact.checksum,
        createdAt: artifact.createdAt,
      });

      sessionStore.updateSession(session.id, {
        artifacts: updatedSession.artifacts,
        metrics: {
          ...updatedSession.metrics,
          artifactsGenerated: updatedSession.metrics.artifactsGenerated + 1,
        },
      });
    }

    const finalSession = sessionStore.getSession(session.id);
    console.log(`   📊 Final metrics:`, finalSession?.metrics);
    console.log(`   📁 Artifacts count: ${finalSession?.artifacts.length}`);
    console.log();

    // Step 9: Demonstrate artifact retrieval
    console.log('10. Demonstrating artifact retrieval...');
    const retrievedContent = await fileStore.getFile(artifact.id);
    const isValid = await fileStore.verifyFileIntegrity(artifact.id);

    console.log(
      `   ✅ Artifact retrieved: ${retrievedContent ? 'Success' : 'Failed'}`
    );
    console.log(`   🔐 Integrity check: ${isValid ? 'Valid' : 'Invalid'}`);
    console.log(`   📏 Content length: ${retrievedContent?.length} bytes`);
    console.log();

    // Step 10: Show session statistics
    console.log('11. Session statistics...');
    const sessionCount = sessionStore.getSessionCount();
    const fileStats = fileStore.getStats();

    console.log(`   👥 Active sessions: ${sessionCount}`);
    console.log(`   📁 Total files: ${fileStats.totalFiles}`);
    console.log(
      `   💾 Total storage: ${Math.round(fileStats.totalSize / 1024)} KB`
    );
    console.log();

    console.log('🎉 Profiling workflow demo completed successfully!');
    console.log('\n📋 Summary:');
    console.log('   ✅ Assistant and thread created');
    console.log('   ✅ Session management working');
    console.log('   ✅ Message and run creation successful');
    console.log('   ✅ Artifact storage and retrieval working');
    console.log('   ✅ Metrics tracking functional');
    console.log('   ✅ File integrity verification passed');
  } catch (error) {
    console.error('❌ Demo failed:', error);
    throw error;
  }
}

// Export for testing
export { demonstrateProfilingWorkflow };

// Run demo if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  demonstrateProfilingWorkflow()
    .then(() => {
      console.log('\n✨ Demo completed successfully!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n💥 Demo failed:', error);
      process.exit(1);
    });
}
